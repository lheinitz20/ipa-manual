{"/docs/advanced/performance":{"title":"Rendimiento","data":{"":"SWR proporciona una funcionalidad crítica en todo tipo de aplicaciónes web, por lo que el rendimiento\nes una prioridad absoluta.SWR’s tiene caché incorporado y la deduplicación evitan las solicitudes de red innecesarias,\npero el rendimiento del propio hook useSWR sigue siendo importante. En una aplicación compleja, puede haber cientos de llamadas useSWR\nen una solo página.SWR asegura que su aplicación tiene:\nno hay peticiones de red innecesarias\nno hay renderizado innecesarios\nno se importa código innecesario\n\nsin ningún cambio de código por su parte.","deduplicación#Deduplicación":"Es muy común reutilizar los hooks SWR en tu aplicación. Por ejemplo, una aplicación que muestra el avatar del usuario\nactual 5 veces:\n\nfunction useUser() {\nreturn useSWR('/api/user', fetcher)\n}\n\nfunction Avatar () {\nconst { data, error } = useUser()\nif (error) return <Error />\nif (!data) return <Spinner />\n\nreturn <img src={data.avatar_url} />\n}\n\nfunction App() {\nreturn <>\n<Avatar />\n<Avatar />\n<Avatar />\n<Avatar />\n<Avatar />\n</>\n}\n\nCada componente <Avatar/> tiene un hook useSWR en su interior. Dado que tienen el mismo key SWR y\nque se renderizan casi al mismo tiempo, sólo se hará 1 solicitud de red.Se pueden reutilizar los hooks de datos (como useUser en el ejemplo anterior) en todas partes, sin preocuparse por el rendimiento\no las peticiones duplicadas.También existe la opción dedupingInterval para anular el intervalo de deduplicación por defecto.","comparación-profunda#Comparación profunda":"SWR por defecto tiene  deep compares al cambio de datos. Si el valor de data no ha cambiado, no se\nactivará una nueva renderización.También puede personalizar la función de comparación mediante la opción compare si quieres cambiar el comportamiento.\nPor ejemplo, algunas respuestas de la API devuelven una marca de tiempo del servidor que tal vez quiera excluir de la difusión de datos.","colección-de-dependencias#Colección de dependencias":"useSWR devuelve 3 valores de estado: data, error y isValidating cada uno de ellos puede actualizarse de forma independientemente.\nPor ejemplo, si imprimimos esos valores dentro de un ciclo de vida completo de obtención de datos, será algo como esto:\n\nfunction App () {\nconst { data, error, isValidating } = useSWR('/api', fetcher)\nconsole.log(data, error, isValidating)\nreturn null\n}\n\nEn el peor de los casos (si la primera solicitud falló, entonces el reintento fue exitoso). Se verán 4 líneas de registros:\n// console.log(data, error, isValidating)\n\nundefined undefined true  // => start fetching\nundefined Error false     // => end fetching, got an error\nundefined Error true      // => start retrying\nData undefined false      // => end retrying, get the data\nLos cambios de estado tienen sentido. Pero eso también significa que nuestro componente se renderizo 4 veces.Si cambiamos nuestro componente para usar solo data:\n\nfunction App () {\nconst { data } = useSWR('/api', fetcher)\nconsole.log(data)\nreturn null\n}\nLa magia ocurre - ahora solo hay 2 rederizaciones:\n// console.log(data)\nundefined // => hydration / initial render\nData      // => end retrying, get the data\nEl mismo proceso ha ocurrido internamente, hubo un error de la primera solicitud, entonces tenemos los datos del reintento.\nSin embargo, SWR sólo actualiza los estados que utiliza el componente, que ahora sólo es data.Si no se utilizan siempre estos 3 estados, ya se está beneficiando de esta función. En Vercel, esta optimización se\ntraduce en un 60% menos de repeticiones.","tree-shaking#Tree Shaking":"El paquete SWR es tree-shakeable y no tiene efectos secundarios.\nEsto significa que si sólo se importa useSWR core API, las APIs no utilizadas, como useSWRInfinite, no se incluirán en la aplicación."}},"/examples/auth":{"title":"Autenticación","data":{"":""}},"/examples/basic":{"title":"Uso Básico","data":{"":""}},"/examples/error-handling":{"title":"Manejo De Errores","data":{"":""}},"/examples/infinite-loading":{"title":"Carga Infinita","data":{"":""}}}
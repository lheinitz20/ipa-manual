{"/":{"title":"Einführung","data":{"":"Willkommen\nHier findest du meine Notizen, Tipps und Tricks zur Portfolio-Animation.In diesem Handbuch wird dir kurz und bündig erklärt, wie der Quellcode der Animation aufgebaut ist, was du wie anpassen kannst und wovon du besser die Finger lässt :)Ich hoffe du findest wonach du suchst!\nDu kannst dir das Ganze Projekt über GitHub herunterladen, entpacken und auch starten. Wie das funktioniert erkläre ich dir im Handbuch.\n\nInstallation · Beispiele · GitHub Repository"}},"/docs/installation":{"title":"Installation","data":{"":"","von-github-herunterladen#Von GitHub herunterladen":"Über diesen Link kannst du das gesamte Framework über GitHub herunterladen.Danach muss der verzippte Ordner im gewünschten Verzeichnis entpackt werden.","per-kommandozeile-herunterladen#Per Kommandozeile herunterladen":"Kopiere den Link unter Code\n\n\nMit dem Befehl und dem zuvor kopierten Link kannst du nun das Repository in das gewünschte Verzeichnis klonen.\n\n\ngit clone https://github.com/lheinitz20/ipa-animation.git\n\n\n\nMit dem Befehl cd kannst du per Befehlszeile in ein beliebiges Verzeichnis navigieren. Hier mehr zu diesem Befehl.","nodejs#Node.js":"Ohne Node.js kann das Framework nicht ausgeführt werden.\n\nZuerst muss die für das aktuelle Betriebssystem passende Installationsdatei auf der offizielen Seite von Node.js heruntergeladen und ausgeführt werden.\nNun sollte überprüft werden ob die Installation erfolgreich war.\n\nMit dem Befehl\nnpm -version\nkann die Version von Node.js überprüft werden","starten#Starten":"Nun kann das Framework auch schon gestartet werden","wichtige-befehle#Wichtige Befehle":"Die Anwendung wird für die Produktionsnutzung erstellt\nnpm build\nStartet das Next.js Framework\nnpm start\nStartet das Next.js Framework im Entwicklungsmodus\nnpm dev\n\nDer Entwicklungsmodus wird für Anpassungen oder Weiterentwicklungen zwingend empfohlen!\nIst das Framework gestartet, kann die Webseite unter http://localhost:3000 aufgerufen werden."}},"/docs/configuration":{"title":"Konfiguration","data":{"":"Standardmässig wird beim Starten des Frameworks der Port 3000 verwendet. Läuft per Zufall bereits ein anderer Web-Dienst mit diesem Port wird der Port des Next.js Frameworks im Entwicklungsmodus automatisch angepasst.\nAnders als im Entwicklungsmodus kann das Framework in so einem Fall nicht gestartet werden.\n\nMit dem Befehl npm run dev -- -p 3005 kann der Port manuell geändert werden.","ordnerstruktur#Ordnerstruktur":"Die Dateien im Stammverzeichnis haben alle ihre Richtigkeit. Die Namen sollten nicht verändert werden.\nDas public-Verzeichnis hat eine bestimmte Struktur.\nBei den Bildern, welche direkt im public-Verzeichnis liegen, handelt es sich um Hintergründe, Logos oder sonstige Bilder welche mit einer Kamera gemacht wurden.\nIm graphics-Verzeichnis sind sämtliche selbsterstellte Vektorgrafiken zu finden.\nDie heruntergeladenen Icons befinden sich im icons-Verzeichnis.\n\nUm Grafiken/Icons/Hintergründe zu ersetzen, kann die neue Datei gleicht benannt werden wie die bereits Vorhandene und dann direkt in das entsprechende Verzeichnis gezogen werden.\nHandelt es sich allerdings um ein komplett neues Objekt mit anderem Namen, wird es etwas komplizierter. Somit kommen wir zu den Anpassungen"}},"/docs/adjustments":{"title":"Anpassungen","data":{"":"In diesem Abschnitt wird gezeigt, wie die verschiedenen Objekte innerhalb des Quellcodes anzupassen sind.","svg-elemente#SVG-Elemente":"","farben#Farben":"{/* Hebel als SVG eingefügt */}\n<svg className={styles.production_lever} version=\"1.1\" id=\"Layer_1\"\nxmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" viewBox=\"0 0 217.2 212\">\n<style type=\"text/css\">{`\n.st0l{fill:#FFFFFF;}\n.st1l{fill:#151515;}\n`}</style>\n<g id=\"Layer_1\">\n<path id=\"Rechteck_23\" className=\"st0l\" d=\"M190.2,0h17c5.5,0,10,4.5,10,10v192c0,\n5.5-4.5,10-10,10h-17c-5.5,0-10-4.5-10-10V10 C180.2,4.5,184.7,0,190.2,0z\"/>\n<g className={styles.lever_stick}>\n<rect id=\"Rechteck_24\" x=\"163.4\" y=\"29.1\" transform=\"matrix(0.8746 -0.4848 0.4848\n0.8746 -29.1128 95.6917)\" className=\"st0l\" width=\"14\" height=\"150.1\"/>\n<circle id=\"Ellipse_25\" className=\"st1l\" cx=\"132.2\" cy=\"33\" r=\"21\"/>\n</g>\n</g>\n</svg>\nBeim markierten Bereich handelt es sich um zwei Klassen innerhalb des SVG-Elements. Durch diese werden die Farben den einzelnen Elementen zugewiesen.\nSo können die Farben einer Vektorgrafik durch verändern des Farbcodes angepasst werden. Der Farbcode der ersten Klasse lautet hier wie folgt #FFFFFF\nMithilfe dieses Beispiels kann das Ganze selbst getestet werden","ersetzen#Ersetzen":"Ist eine bestimmte Vektorgrafik veraltet oder muss aus anderen Gründen ersetzt werden, muss wie folgt vorgegangen werden:\n{/* Hebel als SVG eingefügt */}\n<svg className={styles.production_lever} version=\"1.1\" id=\"Layer_1\"\nxmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" viewBox=\"0 0 217.2 212\">\n<style type=\"text/css\">{`\n.st0l{fill:#FFFFFF;}\n.st1l{fill:#151515;}\n`}</style>\n<g id=\"Layer_1\">\n<path id=\"Rechteck_23\" className=\"st0l\" d=\"M190.2,0h17c5.5,0,10,4.5,10,10v192c0,\n5.5-4.5,10-10,10h-17c-5.5,0-10-4.5-10-10V10 C180.2,4.5,184.7,0,190.2,0z\"/>\n<g className={styles.lever_stick}>\n<rect id=\"Rechteck_24\" x=\"163.4\" y=\"29.1\" transform=\"matrix(0.8746 -0.4848 0.4848\n0.8746 -29.1128 95.6917)\" className=\"st0l\" width=\"14\" height=\"150.1\"/>\n<circle id=\"Ellipse_25\" className=\"st1l\" cx=\"132.2\" cy=\"33\" r=\"21\"/>\n</g>\n</g>\n</svg>\n\nWurde dem SVG-Element wie in diesem Fall eine Klasse className={styles.production_lever} zugewiesen, sollte diese irgendwo vermerkt werden\nNun kann der gesamte SVG-Code gelöscht werden\nWichtig ist nun, dass das neue SVG-Element an der genau gleichen Stelle eingefügt wird\nDie zuvor gemerkte Klasse wird nun dem neuen SVG-Element zugewiesen\n\n\nDas Styling der Klasse wird nun auf das neue SVG-Element angewendet. In vielen Fällen wird ein Element mithilfe von Klassen auf der Seite positioniert oder die Klasse dient später der Animation des Elements.","klassennamen#Klassennamen":"Es muss darauf geachtet werden, dass die Klassen der einzelnen SVG-Elemente nicht doppelt vorkommen. Ansonsten werden die Style-Eigenschaften überschrieben.","icons#Icons":"Icons wurden mithilfe eines img-Tags eingebunden.\n<img src=\"/icons/photographie_camera.svg\" alt=\"photographie\"></img>","hintergründe#Hintergründe":""}},"/examples/svg-colors":{"title":"SVG Farbenanpassung","data":{"":""}},"/animation":{"title":"animation","data":{"":""}},"/docs/adjustments/svg-elements":{"title":"SVG-Elemente","data":{"":"In diesem Abschnitt wird gezeigt, wie die verschiedenen Objekte innerhalb des Quellcodes anzupassen sind.","svg-elemente#SVG-Elemente":"","farben#Farben":"{/* Hebel als SVG eingefügt */}\n<svg className={styles.production_lever} version=\"1.1\" id=\"Layer_1\"\nxmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" viewBox=\"0 0 217.2 212\">\n<style type=\"text/css\">{`\n.st0l{fill:#FFFFFF;}\n.st1l{fill:#151515;}\n`}</style>\n<g id=\"Layer_1\">\n<path id=\"Rechteck_23\" className=\"st0l\" d=\"M190.2,0h17c5.5,0,10,4.5,10,10v192c0,\n5.5-4.5,10-10,10h-17c-5.5,0-10-4.5-10-10V10 C180.2,4.5,184.7,0,190.2,0z\"/>\n<g className={styles.lever_stick}>\n<rect id=\"Rechteck_24\" x=\"163.4\" y=\"29.1\" transform=\"matrix(0.8746 -0.4848 0.4848\n0.8746 -29.1128 95.6917)\" className=\"st0l\" width=\"14\" height=\"150.1\"/>\n<circle id=\"Ellipse_25\" className=\"st1l\" cx=\"132.2\" cy=\"33\" r=\"21\"/>\n</g>\n</g>\n</svg>\nBeim markierten Bereich handelt es sich um zwei Klassen innerhalb des SVG-Elements. Durch diese werden die Farben den einzelnen Elementen zugewiesen.\nSo können die Farben einer Vektorgrafik durch verändern des Farbcodes angepasst werden. Der Farbcode der ersten Klasse lautet hier wie folgt #FFFFFF\nMithilfe dieses Beispiels kann das Ganze selbst getestet werden","ersetzen#Ersetzen":"Ist eine bestimmte Vektorgrafik veraltet oder muss aus anderen Gründen ersetzt werden, muss wie folgt vorgegangen werden:\n{/* Hebel als SVG eingefügt */}\n<svg className={styles.production_lever} version=\"1.1\" id=\"Layer_1\"\nxmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" viewBox=\"0 0 217.2 212\">\n<style type=\"text/css\">{`\n.st0l{fill:#FFFFFF;}\n.st1l{fill:#151515;}\n`}</style>\n<g id=\"Layer_1\">\n<path id=\"Rechteck_23\" className=\"st0l\" d=\"M190.2,0h17c5.5,0,10,4.5,10,10v192c0,\n5.5-4.5,10-10,10h-17c-5.5,0-10-4.5-10-10V10 C180.2,4.5,184.7,0,190.2,0z\"/>\n<g className={styles.lever_stick}>\n<rect id=\"Rechteck_24\" x=\"163.4\" y=\"29.1\" transform=\"matrix(0.8746 -0.4848 0.4848\n0.8746 -29.1128 95.6917)\" className=\"st0l\" width=\"14\" height=\"150.1\"/>\n<circle id=\"Ellipse_25\" className=\"st1l\" cx=\"132.2\" cy=\"33\" r=\"21\"/>\n</g>\n</g>\n</svg>\n\nWurde dem SVG-Element wie in diesem Fall eine Klasse className={styles.production_lever} zugewiesen, sollte diese irgendwo vermerkt werden\nNun kann der gesamte SVG-Code gelöscht werden\nWichtig ist nun, dass das neue SVG-Element an der genau gleichen Stelle eingefügt wird\nDie zuvor gemerkte Klasse wird nun dem neuen SVG-Element zugewiesen\n\n\nDas Styling der Klasse wird nun auf das neue SVG-Element angewendet. In vielen Fällen wird ein Element mithilfe von Klassen auf der Seite positioniert oder die Klasse dient später der Animation des Elements.","klassennamen#Klassennamen":"Es muss darauf geachtet werden, dass die Klassen der einzelnen SVG-Elemente nicht doppelt vorkommen. Ansonsten werden die Style-Eigenschaften überschrieben."}},"/docs/adjustments/icons":{"title":"Icons","data":{"":"Icons wurden mithilfe eines img-Tags eingebunden.\n<img src=\"/icons/photographie_camera.svg\" alt=\"photographie\"></img>","ersetzen#Ersetzen":"Dadurch sind diese ziemlich leicht zu ersetzen. Das neue Icon wird in das /icons Verzeichnis verschoben. Hat das neue Icon den gleichen Namen, so muss im Code nichts getan werden.\nHat die Datei allerdings einen anderen Namen so muss beim src Attribut der Name der Datei angepasst werden."}},"/docs/adjustments/backgrounds":{"title":"Hintergründe","data":{"":"<img className={styles.start_background} src=\"/start_background.png\" alt=\"start_background\"></img>\nDie Hintergründe wurden ebenfalls mithilfe des img-Tags eingefügt. Der Ablauf um einen Hintergrund zu ersetzen ist mit dem der Icons identisch.\nWie die Grösse oder auch die Position verändert werden kann wird hier erklärt.\nDie Hintergründe wurden mithilfe von verschiedenen Eigenschaften im Stylesheet Animation.module.css platziert. Diese mit TailwindCSS zu herumzuschieben, wäre zu aufwändig/kompliziert gewesen."}},"/docs/adjustments/adjustments":{"title":"adjustments","data":{"":"In diesem Abschnitt wird gezeigt, wie die verschiedenen Objekte innerhalb des Quellcodes anzupassen sind.","svg-elemente#SVG-Elemente":"","farben#Farben":"{/* Hebel als SVG eingefügt */}\n<svg className={styles.production_lever} version=\"1.1\" id=\"Layer_1\"\nxmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" viewBox=\"0 0 217.2 212\">\n<style type=\"text/css\">{`\n.st0l{fill:#FFFFFF;}\n.st1l{fill:#151515;}\n`}</style>\n<g id=\"Layer_1\">\n<path id=\"Rechteck_23\" className=\"st0l\" d=\"M190.2,0h17c5.5,0,10,4.5,10,10v192c0,\n5.5-4.5,10-10,10h-17c-5.5,0-10-4.5-10-10V10 C180.2,4.5,184.7,0,190.2,0z\"/>\n<g className={styles.lever_stick}>\n<rect id=\"Rechteck_24\" x=\"163.4\" y=\"29.1\" transform=\"matrix(0.8746 -0.4848 0.4848\n0.8746 -29.1128 95.6917)\" className=\"st0l\" width=\"14\" height=\"150.1\"/>\n<circle id=\"Ellipse_25\" className=\"st1l\" cx=\"132.2\" cy=\"33\" r=\"21\"/>\n</g>\n</g>\n</svg>\nBeim markierten Bereich handelt es sich um zwei Klassen innerhalb des SVG-Elements. Durch diese werden die Farben den einzelnen Elementen zugewiesen.\nSo können die Farben einer Vektorgrafik durch verändern des Farbcodes angepasst werden. Der Farbcode der ersten Klasse lautet hier wie folgt #FFFFFF\nMithilfe dieses Beispiels kann das Ganze selbst getestet werden","ersetzen#Ersetzen":"Ist eine bestimmte Vektorgrafik veraltet oder muss aus anderen Gründen ersetzt werden, muss wie folgt vorgegangen werden:\n{/* Hebel als SVG eingefügt */}\n<svg className={styles.production_lever} version=\"1.1\" id=\"Layer_1\"\nxmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" viewBox=\"0 0 217.2 212\">\n<style type=\"text/css\">{`\n.st0l{fill:#FFFFFF;}\n.st1l{fill:#151515;}\n`}</style>\n<g id=\"Layer_1\">\n<path id=\"Rechteck_23\" className=\"st0l\" d=\"M190.2,0h17c5.5,0,10,4.5,10,10v192c0,\n5.5-4.5,10-10,10h-17c-5.5,0-10-4.5-10-10V10 C180.2,4.5,184.7,0,190.2,0z\"/>\n<g className={styles.lever_stick}>\n<rect id=\"Rechteck_24\" x=\"163.4\" y=\"29.1\" transform=\"matrix(0.8746 -0.4848 0.4848\n0.8746 -29.1128 95.6917)\" className=\"st0l\" width=\"14\" height=\"150.1\"/>\n<circle id=\"Ellipse_25\" className=\"st1l\" cx=\"132.2\" cy=\"33\" r=\"21\"/>\n</g>\n</g>\n</svg>\n\nWurde dem SVG-Element wie in diesem Fall eine Klasse className={styles.production_lever} zugewiesen, sollte diese irgendwo vermerkt werden\nNun kann der gesamte SVG-Code gelöscht werden\nWichtig ist nun, dass das neue SVG-Element an der genau gleichen Stelle eingefügt wird\nDie zuvor gemerkte Klasse wird nun dem neuen SVG-Element zugewiesen\n\n\nDas Styling der Klasse wird nun auf das neue SVG-Element angewendet. In vielen Fällen wird ein Element mithilfe von Klassen auf der Seite positioniert oder die Klasse dient später der Animation des Elements.","klassennamen#Klassennamen":"Es muss darauf geachtet werden, dass die Klassen der einzelnen SVG-Elemente nicht doppelt vorkommen. Ansonsten werden die Style-Eigenschaften überschrieben."}},"/docs/adjustments/svgelements":{"title":"SVG-Elemente","data":{"":"In diesem Abschnitt wird gezeigt, wie die verschiedenen Objekte innerhalb des Quellcodes anzupassen sind.","svg-elemente#SVG-Elemente":"","farben#Farben":"{/* Hebel als SVG eingefügt */}\n<svg className={styles.production_lever} version=\"1.1\" id=\"Layer_1\"\nxmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" viewBox=\"0 0 217.2 212\">\n<style type=\"text/css\">{`\n.st0l{fill:#FFFFFF;}\n.st1l{fill:#151515;}\n`}</style>\n<g id=\"Layer_1\">\n<path id=\"Rechteck_23\" className=\"st0l\" d=\"M190.2,0h17c5.5,0,10,4.5,10,10v192c0,\n5.5-4.5,10-10,10h-17c-5.5,0-10-4.5-10-10V10 C180.2,4.5,184.7,0,190.2,0z\"/>\n<g className={styles.lever_stick}>\n<rect id=\"Rechteck_24\" x=\"163.4\" y=\"29.1\" transform=\"matrix(0.8746 -0.4848 0.4848\n0.8746 -29.1128 95.6917)\" className=\"st0l\" width=\"14\" height=\"150.1\"/>\n<circle id=\"Ellipse_25\" className=\"st1l\" cx=\"132.2\" cy=\"33\" r=\"21\"/>\n</g>\n</g>\n</svg>\nBeim markierten Bereich handelt es sich um zwei Klassen innerhalb des SVG-Elements. Durch diese werden die Farben den einzelnen Elementen zugewiesen.\nSo können die Farben einer Vektorgrafik durch verändern des Farbcodes angepasst werden. Der Farbcode der ersten Klasse lautet hier wie folgt #FFFFFF\nMithilfe dieses Beispiels kann das Ganze selbst getestet werden","ersetzen#Ersetzen":"Ist eine bestimmte Vektorgrafik veraltet oder muss aus anderen Gründen ersetzt werden, muss wie folgt vorgegangen werden:\n{/* Hebel als SVG eingefügt */}\n<svg className={styles.production_lever} version=\"1.1\" id=\"Layer_1\"\nxmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" viewBox=\"0 0 217.2 212\">\n<style type=\"text/css\">{`\n.st0l{fill:#FFFFFF;}\n.st1l{fill:#151515;}\n`}</style>\n<g id=\"Layer_1\">\n<path id=\"Rechteck_23\" className=\"st0l\" d=\"M190.2,0h17c5.5,0,10,4.5,10,10v192c0,\n5.5-4.5,10-10,10h-17c-5.5,0-10-4.5-10-10V10 C180.2,4.5,184.7,0,190.2,0z\"/>\n<g className={styles.lever_stick}>\n<rect id=\"Rechteck_24\" x=\"163.4\" y=\"29.1\" transform=\"matrix(0.8746 -0.4848 0.4848\n0.8746 -29.1128 95.6917)\" className=\"st0l\" width=\"14\" height=\"150.1\"/>\n<circle id=\"Ellipse_25\" className=\"st1l\" cx=\"132.2\" cy=\"33\" r=\"21\"/>\n</g>\n</g>\n</svg>\n\nWurde dem SVG-Element wie in diesem Fall eine Klasse className={styles.production_lever} mit dem Namen production_lever zugewiesen, sollte diese irgendwo vermerkt werden\nNun kann der gesamte SVG-Code gelöscht werden\nWichtig ist nun, dass das neue SVG-Element an der genau gleichen Stelle eingefügt wird\nDie zuvor gemerkte Klasse wird nun dem neuen SVG-Element zugewiesen\n\n\nDas Styling der Klasse wird nun auf das neue SVG-Element angewendet. In vielen Fällen wird ein Element mithilfe von Klassen auf der Seite positioniert oder die Klasse dient später der Animation des Elements.","klassennamen#Klassennamen":"Es muss darauf geachtet werden, dass die Klassen der einzelnen SVG-Elemente nicht doppelt vorkommen. Ansonsten werden die Style-Eigenschaften überschrieben."}},"/docs/adjustments/format-requirements":{"title":"Formatvorgaben","data":{"":"Allgemein sollten für Webseiten nur die Bildformate .png oder .gif verwendet werden. Allerdings sind auch SVG-Elemente sehr gut geeignet. Hierbei ist wichtig, dass die Bilder hoch aufgelöst sind aber trotzdem nicht eine immense Dateigrösse ergeben. Es empfiehlt sich Bilder vor dem Gebrauch in der Animation zu komprimieren. Dies kann z.B. hier getan werden."}},"/docs/adjustments/tailwindcss":{"title":"TailwindCSS","data":{"":"Bei TailwindCSS handelt es sich um ein Utility-First-CSS-Framework. Die vorgefertigten Klassen, welche dieses Framework mitsich bringt, ermöglichen ein unkompliziertes Gestalten der verschiedenen Elemente auf einer Webseite. So wurde das auch bei dieser Animation zum Teil genutzt. Die Utility-Klassen werden direkt inline beim jweiligen HTML-Element hinzugefügt.\n<div className=\"flex flex-col justify-between children:font-bold children:text-2xl children:opacity-0\">\n\nSämtliche TailwindCSS Klassen und was diese ausrichten kann in der dazugehörigen Dokumentation nachgelesen werden.\nBei Bedarf können diese Klassen ganz einfach ausgetauscht oder auch angepasst werden.","custom-styles#Custom Styles":"TailwindCSS bietet auch die Möglichkeit ganz eigene Klassen mit verschiedensten Eigenschaften zu erstellen. Die Namen können dabei frei gewählt werden.\ntheme: {\nextend: {\ntransformOrigin: {\n'camera-on': '38px 202px',\n}\n},\ncolors: {\nsecondary: '#B7CAFF',\n},","children-module#Children Module":"Mit diesem Modul können die Utility-Klassen von TailwindCSS auch auf Nachfahren angewendet werden. Wie das funktioniert wird in diesem Beispiel sehr gut veranschaulicht."}},"/docs/adjustments/styles":{"title":"Stylesheets","data":{"":"","globales-stylesheet#Globales Stylesheet":"Hier werden alle TailwindCSS Styles importiert und dazu werden auch die Eigenschaften von grundlegenden Elementen definiert.\nAuch die entsprechende Schrift welche für sämtliche Texte verwendet wird, wird per Link von Google Fonts eingebunden. Diese kann bei Bedarf natürlich durch einfügen eines neuen Links geändert werden.\nKlassen oder auch IDs gehören nicht in das globale Stylesheet!","animation-stylesheet#Animation Stylesheet":"Sämtliche Elemente der Animation werden in diesem Dokument gestylt. Meistens beinhaltet die Gestaltung die Positionierung und die Grösse des jeweiligen Objekts auf der Seite."}},"/docs/animejs/timeline":{"title":"Timeline","data":{"":"Anime.js sorgt für die Animation. Es handelt sich um eine JavaScript-Animationsbibliothek. 99% der Bewegungen dieser Animation wurden durch Anime.js ermöglicht.\nZuerst gilt es, eine globale Timeline zu erstellen. Zu dieser Timeline fügt man dann die verschiedenen Animationen hinzu.\nvar basicTimeline = anime.timeline({\ndirection: 'normal',\nloop: false,\nautoplay: true\n});\nAn der Variable basicTimeline sollte an sich nichts verändert werden. Die wichtigste Eigenschaft hierbei ist autoplay: true Wird diese auf \"false\" gesetzt, startet die Animation nicht mehr von alleine. In bestimmten Fällen wird dies evtl. benötigt.\nLäuft die Animation auf einem Bildschirm über eine Software wie Xibo, muss die Eigenschaft autoplay zwinged auf \"true\" gesetzt sein. Ansonsten wird die Animation nicht wiedergegeben!"}},"/docs/animejs/procedures":{"title":"Abläufe","data":{"":"Ein Animationsschritt, welcher der Timeline hinzugefügt wurde sieht im Ganzen etwa so aus:\n.add({\ntargets: '.Animation_parachute__GZcRF',\nscaleX: 0.2,\nscaleY: 0.2,\ntranslateY: '-3000',\nopacity: 0,\nduration: 3000,\neasing: 'easeInOutQuad'\n}, '-=500')","eigenschaften#Eigenschaften":"In den nächsten Kapiteln werden die verschiedenen Eigenschaften, welche zur Animation eines Objekts führen, erklärt. Die Werte der verschiedenen Eigenschaften variieren allerdings sehr häufig.","targets#targets":"targets: '.Animation_whole_robot__Xj3IE',\nBei der Eigenschaft targets geht es darum die Objekte, welche Ziel von der jeweiligen Animation werden sollen, auszuwählen. In diesem Beispiel wurde eine Klasse ausgewählt welche den Fallschirm des Roboters anspricht.","scale#scale":"scaleX: 0.2,\nscaleY: 0.2,\nDanach wird der Fallschirm mit dem Faktor 0.2 in x & y-Richtung skaliert (gestreckt, gestaucht oder verzerrt). Somit wird die Grafik nicht verzerrt, sondern in diesem Sinne nur verkleinert.","translate#translate":"translateX: [-340, 300],\nMit der translate-Eigenschaft soll der Fallschirm dann verschoben werden. Hier wird der Roboter auf der y-Achse auf die Koordinate -3000 verschoben.\nDer Nullpunkt des Koordinatensystems liegt auf der Seite ganz links oben.","opacity#opacity":"opacity: 0,\nDiese Eigenschaft kommt in der Animation oft vor. Dadurch dass die Deckkraft auf 0 gesetzt wird, wird der Fallschirm komplett ausgeblendet. Die Deckkraft wird häufig verwendet um verschiedene Elemente der Animation überhaupt erst einzublenden.","duration#duration":"duration: 3000,\nMit der duration wird festgelegt wie lange die Durchführung der einzelnen Anpassungen der Eigenschaften dauern soll. Der Wert wird in Millisekunden angegeben.","easing#easing":"easing: 'easeInOutQuad'\nSogenannte \"easing functions\" auf Deutsch Übergangsfunktionen bestimmen die Änderungsrate eines Parameteres im Verlauf der Zeit. Dadurch können Bewegungen der Realität angepasst werden.\nMehr zu den Übergangsfunktionen kann hier gefunden werden.","begin#begin":"ROTATE FEHLT"}},"/docs/animejs/timemanagement":{"title":"Zeitmanagement","data":{"":".add({\ntargets: '.Animation_parachute__GZcRF',\nscaleX: 0.2,\nscaleY: 0.2,\ntranslateY: '-3000',\nopacity: 0,\nduration: 3000,\neasing: 'easeInOutQuad'\n}, '-=500')"}},"/examples/children":{"title":"Kindermodul","data":{"":""}}}